package game;

import edu.monash.fit2099.engine.actions.Action;
import edu.monash.fit2099.engine.actions.ActionList;
import edu.monash.fit2099.engine.actions.DoNothingAction;
import edu.monash.fit2099.engine.actors.Behaviour;
import edu.monash.fit2099.engine.actors.Actor;
import edu.monash.fit2099.engine.displays.Display;
import edu.monash.fit2099.engine.positions.GameMap;
import java.util.ArrayList;
import java.util.List;

/**
 * A non-hostile omen sheep that wanders each turn.
 * It can be attacked by actors with HOSTILE_TO_ENEMY capability.
 * @author Your Name
 * @version 1.0
 */
public class OmenSheep extends Actor {
    private final List<Behaviour> behaviours = new ArrayList<>();

    /**
     * Constructor for OmenSheep.
     * Creates an omen sheep with display character 'm' and 75 hit points.
     * Adds wandering behavior to the sheep.
     */
    public OmenSheep() {
        super("Omen Sheep", 'm', 75);
        behaviours.add(new WanderBehaviour());
    }

    /**
     * Defines the behavior of the omen sheep during its turn.
     * The sheep will wander randomly if possible, otherwise do nothing.
     *
     * @param actions    collection of possible Actions for this Actor
     * @param lastAction The Action this Actor took last turn
     * @param map        the GameMap containing the Actor
     * @param display    the Display where the Actor's game progress can be shown
     * @return the Action to be performed
     */
    @Override
    public Action playTurn(ActionList actions, Action lastAction, GameMap map, Display display) {
        for (Behaviour b : behaviours) {
            Action a = b.getAction(this, map);
            if (a != null) {
                return a;
            }
        }
        return new DoNothingAction();
    }

    /**
     * Returns a list of actions that can be performed on this sheep.
     * If the other actor has HOSTILE_TO_ENEMY capability, they can attack this sheep.
     *
     * @param other     the Actor that might perform an action on this sheep
     * @param direction String representing the direction of the other Actor
     * @param map       current GameMap
     * @return list of actions that can be performed on this sheep
     */
    @Override
    public ActionList allowableActions(Actor other, String direction, GameMap map) {
        ActionList list = new ActionList();
        if (other.hasCapability(Status.HOSTILE_TO_ENEMY)) {
            list.add(new AttackAction(this, direction));
        }
        return list;
    }
}

